package top.hubby.practice.refactor.after.v5;

import com.google.common.annotations.VisibleForTesting;
import lombok.extern.slf4j.Slf4j;
import top.hubby.practice.refactor.after.v1.LogTraceIdGenerator;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Random;

/**
 * Id Generator that is used to generate random IDs.
 *
 * <p>The IDs generated by this class are not absolutely unique, but the probability of duplication
 * is very low.
 *
 * @author asd <br>
 * @create 2021-12-24 12:05 PM <br>
 * @project pattern <br>
 */
@Slf4j
public class LogRandomIdGenerator implements LogTraceIdGenerator {

    /**
     * Generate the random ID. The IDs may be duplicated only in extreme situation.
     *
     * @return an random ID
     */
    @Override
    public String generate() throws IdGenerationFailureException {
        String substrOfHostName = null;
        try {
            substrOfHostName = getLastFieldOfHostName();
        } catch (UnknownHostException e) {
            log.info("exception: ", e);
            throw new IdGenerationFailureException("host name is empty.");
        }
        long currentTimeMillis = System.currentTimeMillis();
        String randomString = generateRandomAlphameric(8);
        return String.format("%s-%d-%s", substrOfHostName, currentTimeMillis, randomString);
    }
    /**
     * Get local hostname and extract the last field of the name string splitted by delimiter '.'.
     *
     * @return the last field of hostname. Returns null if hostname is not obtained.
     */
    private String getLastFieldOfHostName() throws UnknownHostException {
        String hostName = InetAddress.getLocalHost().getHostName();

        if (hostName == null || hostName.isEmpty()) {
            throw new UnknownHostException("...");
        }

        return getLastSubstrSplittedByDot(hostName);
    }

    /**
     * Get the last field of ostName splitted by delemiter '.'.
     *
     * <pre>
     *   这里是否需要对 hostName 做校验
     *      1. 如果函数是 private 类私有的, 只在类内部被调用,
     *          自己保证在调用这个 private 函数的时候, 不要传递 NULL 值或空字符串即可
     *      2. 如果函数是 public 的, 为了尽可能提高代码的健壮性,
     *          最好是在 public 函数中做 NULL 值或空字符串的判断
     * </pre>
     *
     * @param hostName should not be null
     * @return the last field of hostName. Returns empty string if hostName is empty string.
     */
    @VisibleForTesting
    public String getLastSubstrSplittedByDot(String hostName) {
        if (hostName == null || hostName.isEmpty()) {
            throw new IllegalArgumentException("...");
        }

        String[] tokens = hostName.split("\\.");
        return tokens[tokens.length - 1];
    }

    /**
     * Generate random string which only contains digits, uppercase letters and lowercase letters.
     *
     * @param length should not be less than 0
     * @return the random string. Returns empty string if length is 0
     */
    @VisibleForTesting
    public String generateRandomAlphameric(int length) {
        if (length <= 0) {
            throw new IllegalArgumentException("...");
        }

        char[] randomChars = new char[length];
        int count = 0;
        Random random = new Random();
        while (count < length) {
            int maxAscii = 'z';
            int randomAscii = random.nextInt(maxAscii);
            boolean isDigit = randomAscii >= '0' && randomAscii <= '9';
            boolean isUppercase = randomAscii >= 'A' && randomAscii <= 'Z';
            boolean isLowercase = randomAscii >= 'a' && randomAscii <= 'z';
            if (isDigit || isUppercase || isLowercase) {
                randomChars[count] = (char) (randomAscii);
                ++count;
            }
        }
        return new String(randomChars);
    }
}
